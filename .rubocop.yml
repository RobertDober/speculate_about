# The behavior of RuboCop can be controlled via the .rubocop.yml
# configuration file. It makes it possible to enable/disable
# certain cops (checks) and to alter their behavior if they accept
# any parameters. The file can be placed either in your home
# directory or in some project directory.
#
# RuboCop will start looking for the configuration file in the directory
# where the inspected file is and continue its way up to the root directory.
#
# See https://docs.rubocop.org/rubocop/configuration


AllCops:
  NewCops: disable
  Exclude:
    - "spec/speculations/**/*.rb" # Generated by speculate_about
  SuggestExtensions: false
  TargetRubyVersion: 3.1

Layout/EmptyLinesAroundAccessModifier:
  Enabled: false

Layout/EmptyLinesAroundAttributeAccessor:
  Enabled: false

Layout/ExtraSpacing:
  Enabled: false

Layout/IndentationConsistency:
  Enabled: false

Layout/SpaceAroundOperators:
 Enabled: false

Layout/SpaceBeforeBlockBraces:
  Enabled: false

# Metrics/AbcSize:
#   Exclude:

Metrics/BlockLength:
  Exclude:
    - "spec/**/*.rb"

Metrics/MethodLength:
   Max: 15

Naming/HeredocDelimiterNaming:
  Enabled: false

Naming/MemoizedInstanceVariableName:
  Enabled: false

Naming/MethodName:
  Enabled: false

Naming/MethodParameterName:
  Enabled: false

Style/BlockComments:
  Exclude:
    - "spec/spec_helper.rb"

Style/CaseEquality:
    Enabled: false

Style/ClassAndModuleChildren:
    Enabled: false

Style/Documentation:
  Enabled: false

Style/DoubleNegation:
  Enabled: false

Style/EmptyCaseCondition:
  Enabled: false

# Style/EmptyMethod:
#   Enabled: false

Style/FrozenStringLiteralComment:
  Include:
    - "lib/**/*.rb"

Style/Lambda:
  Enabled: false

Style/LambdaCall:
  Enabled: false

Style/ModuleFunction:
  Enabled: false

Style/StringLiterals:
  Enabled: false

Style/TrailingBodyOnModule:
  Enabled: false

Style/WhileUntilModifier:
  Enabled: false
